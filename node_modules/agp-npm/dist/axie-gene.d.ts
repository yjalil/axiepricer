import { Part } from './models/part';
import { ColorGene } from './models/color';
import { BodySkin } from './models/bodySkin';
import { Cls } from './models/cls';
import { Tag } from './models/tag';
import { Gene } from './models/gene';
import { Region } from './models/region';
import { PatternGene } from './models/pattern';
export declare enum HexType {
    Bit256 = 256,
    Bit512 = 512
}
/**
 * Stores the gene information of an Axie. These informations are parsed from the provided hex representation of
 * the Axie's gene on its constructor call. Supports both 256 and 512 bit hex genes.
 *
 * **Usage**
 *
 * Javascript
 *
 * ```javascript
 * const { AxieGene } = require("agp-npm-test/dist/src/axie-gene");
 * const axieGene = new AxieGene("0x11c642400a028ca14a428c20cc011080c61180a0820180604233082");
 * ```
 *
 * Typescript
 *
 * ```typescript
 * const axieGene = new AxieGene("0x11c642400a028ca14a428c20cc011080c61180a0820180604233082");
 * ```
 */
export declare class AxieGene {
    /** Stores the grouped binary values from the hex value. */
    private geneBinGroup;
    /** Stores the gene details from the parsed binary values. */
    private readonly _genes;
    /** Stores the gene hex type wether its in 256 or 512 bit. */
    private readonly _hexType;
    /**
     * Used to initialize an AxieGene object from a hex representation of the Axie's gene.
     * @param hex hex representation of the Axie's gene.
     * @param hexType represents if the provided hex gene is in 256 or 512 bit.
     */
    constructor(hex: string, hexType?: HexType);
    /**
     * Getter for all of the details of the Axie's gene.
     * @returns Objects that contains all of the details about of the Axie's gene.
     */
    get genes(): Gene;
    /**
     * Getter for the class of the Axie.
     * @returns Class of the Axie.
     */
    get cls(): Cls;
    /**
     * Getter for the region of the Axie.
     * @returns Region of the Axie.
     */
    get region(): Region;
    /**
     * Getter for the tag associated with the Axie.
     * @returns Tag associated with the Axie.
     */
    get tag(): Tag;
    /**
     * Getter for the body skin of the Axie.
     * @returns Skin of the Axie's body.
     */
    get bodySkin(): BodySkin;
    /**
     * Getter for the pattern genes of the Axie.
     * @returns Genes for the Axie's pattern.
     */
    get pattern(): PatternGene;
    /**
     * Getter for the color genes of the Axie.
     * @returns Genes for the Axie's color.
     */
    get color(): ColorGene;
    /**
     * Getter for the eye genes of the Axie.
     * @returns Genes for the Axie's eye.
     */
    get eyes(): Part;
    /**
     * Getter for the ears genes of the Axie.
     * @returns Genes for the Axie's ears.
     */
    get ears(): Part;
    /**
     * Getter for the horn genes of the Axie.
     * @returns Genes for the Axie's horns.
     */
    get horn(): Part;
    /**
     * Getter for the mouth genes of the Axie.
     * @returns Genes for the Axie's mouth.
     */
    get mouth(): Part;
    /**
     * Getter for the back genes of the Axie.
     * @returns Genes for the Axie's back.
     */
    get back(): Part;
    /**
     * Getter for the tail genes of the Axie.
     * @returns Genes for the Axie's tail.
     */
    get tail(): Part;
    /**
     * Converts the hex into its binary representation and divides them based on their respective respective groups.
     * Each group represents a part of an Axie.
     * @private
     * @param hex hex representation of an Axie's gene.
     * @returns An object that contains the binary value from the hex. The binary values are divided into their respective
     * group based on the gene detail that they represent.
     */
    private parseHex;
    /**
     * Converts the binary values into a human-readable format in the form of a Gene object.
     * @private
     * @returns Gene Gene object that contains the set of gene information.
     */
    private parseGenes;
    /**
     * Parse the class binary values from the GeneBinGroup into a Cls object.
     * @private
     * @returns Cls class of the Axie.
     */
    private parseClass;
    /**
     * Parse the region binary values from the GeneBinGroup into a Region object.
     * @private
     * @returns Region region of the Axie.
     */
    private parseRegion;
    /**
     * Parse the tag binary values from the GeneBinGroup into a Tag object.
     * @private
     * @returns Tag tag of the Axie.
     */
    private parseTag;
    /**
     * Parse the body skin binary values from the GeneBinGroup into a BodySkin object.
     * @private
     * @returns BodySkin body skin of the Axie.
     */
    private parseBodySkin;
    /**
     * Parse the pattern gene binary values from the GeneBinGroup into a PatternGene object.
     * @private
     * @returns PatternGene pattern gene of the Axie.
     */
    private parsePatternGenes;
    /**
     * Parse the color gene binary values from the GeneBinGroup into a ColorGene object.
     * @private
     * @returns ColorGene color gene of the Axie.
     */
    private parseColorGenes;
    /**
     * Parse the part gene binary values from the GeneBinGroup into a Part object.
     * @private
     * @param partBin binary of the part that will be parsed.
     * @param partType part type that will be parsed. A part type refers to an Axie's body part including: Eyes, Ears, Mouth, Back, Horn, Tail
     * @returns Part part gene of the Axie.
     */
    private parsePart;
    /**
     * Parse the class of the given part into a Cls object.
     * @private
     * @param bin binary representation of an Axie's body part.
     * @returns Cls class of the Axie's body part.
     */
    private parsePartClass;
    /**
     * Parse the name of an Axie's body part based on its class, part type, region, part binary, and skin binary.
     * @private
     * @param cls class of the Axie's body part.
     * @param partType part type that will be parsed.
     * @param regionBin region binary of the Axie.
     * @param partBin part binary of the Axie.
     * @param skin skin type of the Axie's part.
     * @returns Cls class of the Axie.
     */
    private parsePartName;
    /**
     * Converts the part type and name into a format used as the partId. A lookup is then performed from the contents
     * of the parts.json file to match the partId with the part gene presets.
     * @private
     * @param partType body part that will be parsed.
     * @param partName name of the specific body part.
     * @returns PartGene an objects that contains the part class, id, name, type, and if it is a special gene.
     */
    private parsePartGene;
    /**
     * Parses the skin of the part based on its region and skin binary value.
     * @private
     * @param regionBin region binary of the Axie.
     * @param skinBin skin binary of the Axie.
     * @returns PartSkin skin of the Axie's body part.
     */
    private parsePartSkin;
    /**
     * Calculates the purity or gene quality of the Axie's gene.
     * @returns a number that represents the quality of the gene in percentage.
     */
    getGeneQuality(): number;
    /**
     * Calculate the purity or gene quality of the Axie's individual parts.
     * @param part part genes the will be used for the calculation.
     * @private
     * @returns an integer that represents the quality of the individual part in percentage.
     */
    private getPartQuality;
}
